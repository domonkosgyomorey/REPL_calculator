Tokens [NUMBER(1, 2)]
Infixed syntax [NUMBER(1, 2)]
Expression tree Ok(Number(1))
Output 1

Tokens [LPAREN(2), NUMBER(2, 3), PLUS(3), NUMBER(3, 5), RPAREN(6), MINUS(6), NUMBER(3, 8)]
Infixed syntax [NUMBER(2, 3), NUMBER(3, 5), PLUS(3), NUMBER(3, 8), MINUS(6)]
Expression tree Ok(BOperator { op: MINUS(6), left: BOperator { op: PLUS(3), left: Number(2), right: Number(3) }, right: Number(3) })
Output 2

Tokens [NUMBER(1, 2), PLUS(2), EXPR(BOperator { op: MINUS(6), left: BOperator { op: PLUS(3), left: Number(2), right: Number(3) }, right: Number(3) }, 3), MUL(8), NUMBER(2, 9)]
Infixed syntax [NUMBER(1, 2), EXPR(BOperator { op: MINUS(6), left: BOperator { op: PLUS(3), left: Number(2), right: Number(3) }, right: Number(3) }, 3), NUMBER(2, 9), MUL(8), PLUS(2)]
Expression tree Ok(BOperator { op: PLUS(2), left: Number(1), right: BOperator { op: MUL(8), left: Expression(BOperator { op: MINUS(6), left: BOperator { op: PLUS(3), left: Number(2), right: Number(3) }, right: Number(3) }), right: Number(2) } })
Output 5

