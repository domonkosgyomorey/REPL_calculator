Tokens [LPAREN(0), NUMBER(2, 1), PLUS(2), NUMBER(3, 3), RPAREN(4), MINUS(5), NUMBER(3, 6)]
Infixed syntax [NUMBER(2, 1), NUMBER(3, 3), PLUS(2), NUMBER(3, 6), MINUS(5)]
Expression tree Ok(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) })
Output 2

Tokens [NUMBER(3, 0), MUL(1), LPAREN(2), NUMBER(1, 3), PLUS(4), NUMBER(2, 5), PLUS(6), NUMBER(3, 7), RPAREN(8)]
Infixed syntax [NUMBER(3, 0), NUMBER(1, 3), NUMBER(2, 5), PLUS(4), NUMBER(3, 7), PLUS(6), MUL(1)]
Expression tree Ok(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } })
Output 18

Tokens [EXPR(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) }, 0), MUL(1), LPAREN(2), EXPR(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) }, 3), PLUS(4), EXPR(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } }, 5), RPAREN(10), MINUS(11), EXPR(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } }, 12)]
Infixed syntax [EXPR(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) }, 0), EXPR(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) }, 3), EXPR(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } }, 5), PLUS(4), MUL(1), EXPR(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } }, 12), MINUS(11)]
Expression tree Ok(BOperator { op: MINUS(11), left: BOperator { op: MUL(1), left: Expression(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) }), right: BOperator { op: PLUS(4), left: Expression(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) }), right: Expression(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } }) } }, right: Expression(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } }) })
Output 22

Tokens [LPAREN(0), EXPR(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) }, 1), RPAREN(2), MUL(3), LPAREN(4), EXPR(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) }, 5), PLUS(6), EXPR(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } }, 7), RPAREN(12), MINUS(13), EXPR(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } }, 14)]
Infixed syntax [EXPR(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) }, 1), EXPR(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) }, 5), EXPR(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } }, 7), PLUS(6), MUL(3), EXPR(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } }, 14), MINUS(13)]
Expression tree Ok(BOperator { op: MINUS(13), left: BOperator { op: MUL(3), left: Expression(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) }), right: BOperator { op: PLUS(6), left: Expression(BOperator { op: MINUS(5), left: BOperator { op: PLUS(2), left: Number(2), right: Number(3) }, right: Number(3) }), right: Expression(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } }) } }, right: Expression(BOperator { op: MUL(1), left: Number(3), right: BOperator { op: PLUS(6), left: BOperator { op: PLUS(4), left: Number(1), right: Number(2) }, right: Number(3) } }) })
Output 22

