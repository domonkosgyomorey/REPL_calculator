Tokens [NUMBER(3, 0), MUL(1), NUMBER(1, 2), MINUS(3), NUMBER(3, 4), PLUS(5), NUMBER(2, 7), EQUAL(9), SQRT(11), NUMBER(16, 13), DIV(14), NUMBER(2, 15), FACT(16), MINUS(17), LPAREN(18), NUMBER(6, 19), BAND(20), NUMBER(3, 21), RPAREN(22), AND(25), SQRT(27), LPAREN(28), NUMBER(2, 29), POW(31), NUMBER(3, 32), MUL(33), NUMBER(50, 35), RPAREN(36), GE(38), NUMBER(19, 40)]
Infixed syntax [NUMBER(3, 0), NUMBER(1, 2), MUL(1), NUMBER(3, 4), MINUS(3), NUMBER(2, 7), PLUS(5), NUMBER(16, 13), SQRT(11), NUMBER(2, 15), FACT(16), DIV(14), NUMBER(6, 19), NUMBER(3, 21), BAND(20), MINUS(17), EQUAL(9), NUMBER(2, 29), NUMBER(3, 32), POW(31), NUMBER(50, 35), MUL(33), SQRT(27), NUMBER(19, 40), GE(38), AND(25)]
Expression tree Ok(BOperator { op: AND(25), left: BOperator { op: EQUAL(9), left: BOperator { op: PLUS(5), left: BOperator { op: MINUS(3), left: BOperator { op: MUL(1), left: Number(3), right: Number(1) }, right: Number(3) }, right: Number(2) }, right: BOperator { op: MINUS(17), left: BOperator { op: DIV(14), left: UROperator { op: SQRT(11), right: Number(16) }, right: ULOperator { op: FACT(16), left: Number(2) } }, right: BOperator { op: BAND(20), left: Number(6), right: Number(3) } } }, right: BOperator { op: GE(38), left: UROperator { op: SQRT(27), right: BOperator { op: MUL(33), left: BOperator { op: POW(31), left: Number(2), right: Number(3) }, right: Number(50) } }, right: Number(19) } })
0

Tokens [NUMBER(3, 0), MUL(1), NUMBER(1, 2), MINUS(3), NUMBER(3, 4), PLUS(5), NUMBER(2, 7), EQUAL(9), SQRT(11), NUMBER(16, 13), DIV(14), NUMBER(2, 15), FACT(16), MINUS(17), LPAREN(18), NUMBER(6, 19), BAND(20), NUMBER(3, 21), RPAREN(22)]
Infixed syntax [NUMBER(3, 0), NUMBER(1, 2), MUL(1), NUMBER(3, 4), MINUS(3), NUMBER(2, 7), PLUS(5), NUMBER(16, 13), SQRT(11), NUMBER(2, 15), FACT(16), DIV(14), NUMBER(6, 19), NUMBER(3, 21), BAND(20), MINUS(17), EQUAL(9)]
Expression tree Ok(BOperator { op: EQUAL(9), left: BOperator { op: PLUS(5), left: BOperator { op: MINUS(3), left: BOperator { op: MUL(1), left: Number(3), right: Number(1) }, right: Number(3) }, right: Number(2) }, right: BOperator { op: MINUS(17), left: BOperator { op: DIV(14), left: UROperator { op: SQRT(11), right: Number(16) }, right: ULOperator { op: FACT(16), left: Number(2) } }, right: BOperator { op: BAND(20), left: Number(6), right: Number(3) } } })
0

Tokens [SQRT(0), LPAREN(1), NUMBER(2, 2), POW(4), NUMBER(3, 5), MUL(6), NUMBER(50, 8), RPAREN(9), GE(11), NUMBER(19, 13)]
Infixed syntax [NUMBER(2, 2), NUMBER(3, 5), POW(4), NUMBER(50, 8), MUL(6), SQRT(0), NUMBER(19, 13), GE(11)]
Expression tree Ok(BOperator { op: GE(11), left: UROperator { op: SQRT(0), right: BOperator { op: MUL(6), left: BOperator { op: POW(4), left: Number(2), right: Number(3) }, right: Number(50) } }, right: Number(19) })
1

Tokens [NUMBER(3, 0), MUL(1), NUMBER(1, 2), MINUS(3), NUMBER(3, 4), PLUS(5), NUMBER(2, 7), NEQUAL(9), SQRT(11), NUMBER(16, 13), DIV(14), NUMBER(2, 15), FACT(16), MINUS(17), LPAREN(18), NUMBER(6, 19), BAND(20), NUMBER(3, 21), RPAREN(22), AND(25), SQRT(27), LPAREN(28), NUMBER(2, 29), POW(31), NUMBER(3, 32), MUL(33), NUMBER(50, 35), RPAREN(36), GE(38), NUMBER(19, 40)]
Infixed syntax [NUMBER(3, 0), NUMBER(1, 2), MUL(1), NUMBER(3, 4), MINUS(3), NUMBER(2, 7), PLUS(5), NUMBER(16, 13), SQRT(11), NUMBER(2, 15), FACT(16), DIV(14), NUMBER(6, 19), NUMBER(3, 21), BAND(20), MINUS(17), NEQUAL(9), NUMBER(2, 29), NUMBER(3, 32), POW(31), NUMBER(50, 35), MUL(33), SQRT(27), NUMBER(19, 40), GE(38), AND(25)]
Expression tree Ok(BOperator { op: AND(25), left: BOperator { op: NEQUAL(9), left: BOperator { op: PLUS(5), left: BOperator { op: MINUS(3), left: BOperator { op: MUL(1), left: Number(3), right: Number(1) }, right: Number(3) }, right: Number(2) }, right: BOperator { op: MINUS(17), left: BOperator { op: DIV(14), left: UROperator { op: SQRT(11), right: Number(16) }, right: ULOperator { op: FACT(16), left: Number(2) } }, right: BOperator { op: BAND(20), left: Number(6), right: Number(3) } } }, right: BOperator { op: GE(38), left: UROperator { op: SQRT(27), right: BOperator { op: MUL(33), left: BOperator { op: POW(31), left: Number(2), right: Number(3) }, right: Number(50) } }, right: Number(19) } })
1

